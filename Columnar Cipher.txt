import math

def encryptMessage(msg, key):
    cipher = ""
    msg_len = float(len(msg))
    msg_lst = list(msg)
    col = key 
    row = int(math.ceil(msg_len / col))

    fill_null = int((row * col) - msg_len)
    msg_lst.extend('_' * fill_null)
    matrix = [msg_lst[i: i + col] for i in range(0, len(msg_lst), col)]
    for i in range(col):
        cipher += ''.join([row[i] for row in matrix])

    return cipher



def decryptMessage(cipher, key):
    msg = ""
    msg_indx = 0
    msg_len = float(len(cipher))
    msg_lst = list(cipher)
    col = key
    row = int(math.ceil(msg_len / col))
    dec_cipher = [[None] * col for _ in range(row)]
    for i in range(col):
        for j in range(row):
            dec_cipher[j][i] = msg_lst[msg_indx]
            msg_indx += 1
    try:
        msg = ''.join(sum(dec_cipher, []))
    except TypeError:
        raise TypeError("This program cannot handle repeating words.")
    null_count = msg.count('_')
    if null_count > 0:
        return msg[:-null_count]

    return msg

# Driver Code
msg = input("Enter Message: ")
key = int(input("Enter Key : "))

cipher = encryptMessage(msg, key)
print("Encrypted Message:", cipher)

decrypted_msg = decryptMessage(cipher, key)
print("Decrypted Message:", decrypted_msg)
import math

def encryptMessage(msg, key):
    cipher = ""
    msg_len = float(len(msg))
    msg_lst = list(msg)
    col = len(key)
    row = int(math.ceil(msg_len / col))
    

    fill_null = int((row * col) - msg_len)
    msg_lst.extend('_' * fill_null)
    
    matrix = [msg_lst[i: i + col] for i in range(0, len(msg_lst), col)]
    key_lst = sorted(list(enumerate(key)), key=lambda x: x[1])
    sorted_indices = [k[0] for k in key_lst]
    for idx in sorted_indices:
        cipher += ''.join([row[idx] for row in matrix])
    
    return cipher



def decryptMessage(cipher, key):
    msg = ""
    msg_indx = 0
    msg_len = float(len(cipher))
    msg_lst = list(cipher)
    col = len(key)
    row = int(math.ceil(msg_len / col))
    
    dec_cipher = [[None] * col for _ in range(row)]
    
    key_lst = sorted(list(enumerate(key)), key=lambda x: x[1])
    sorted_indices = [k[0] for k in key_lst]
    
    for idx in sorted_indices:
        for j in range(row):
            dec_cipher[j][idx] = msg_lst[msg_indx]
            msg_indx += 1
    
    msg = ''.join(sum(dec_cipher, []))
    null_count = msg.count('_')
    if null_count > 0:
        return msg[:-null_count]
    
    return msg

# Driver Code
msg = input("Enter Message: ")
key = input("Enter Key: ")

cipher = encryptMessage(msg, key)
print("Encrypted Message:", cipher)

decrypted_msg = decryptMessage(cipher, key)
print("Decrypted Message:", decrypted_msg)
